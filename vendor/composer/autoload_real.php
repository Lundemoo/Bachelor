<?php

// autoload_real.php @generated by Composer

<<<<<<< HEAD
class ComposerAutoloaderInit9d1724112df830ae938e465a12a36be1
=======
class ComposerAutoloaderInit10d375be82a003dac55bef4142143962
>>>>>>> 39f3b6ad0c246f4704fa5a5736a1d0fcdbb84cd6
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

<<<<<<< HEAD
        spl_autoload_register(array('ComposerAutoloaderInit9d1724112df830ae938e465a12a36be1', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit9d1724112df830ae938e465a12a36be1', 'loadClassLoader'));
=======
        spl_autoload_register(array('ComposerAutoloaderInit10d375be82a003dac55bef4142143962', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit10d375be82a003dac55bef4142143962', 'loadClassLoader'));
>>>>>>> 39f3b6ad0c246f4704fa5a5736a1d0fcdbb84cd6

        $includePaths = require __DIR__ . '/include_paths.php';
        array_push($includePaths, get_include_path());
        set_include_path(join(PATH_SEPARATOR, $includePaths));

        $map = require __DIR__ . '/autoload_namespaces.php';
        foreach ($map as $namespace => $path) {
            $loader->set($namespace, $path);
        }

        $map = require __DIR__ . '/autoload_psr4.php';
        foreach ($map as $namespace => $path) {
            $loader->setPsr4($namespace, $path);
        }

        $classMap = require __DIR__ . '/autoload_classmap.php';
        if ($classMap) {
            $loader->addClassMap($classMap);
        }

        $loader->register(true);

        $includeFiles = require __DIR__ . '/autoload_files.php';
        foreach ($includeFiles as $file) {
<<<<<<< HEAD
            composerRequire9d1724112df830ae938e465a12a36be1($file);
=======
            composerRequire10d375be82a003dac55bef4142143962($file);
>>>>>>> 39f3b6ad0c246f4704fa5a5736a1d0fcdbb84cd6
        }

        return $loader;
    }
}

<<<<<<< HEAD
function composerRequire9d1724112df830ae938e465a12a36be1($file)
=======
function composerRequire10d375be82a003dac55bef4142143962($file)
>>>>>>> 39f3b6ad0c246f4704fa5a5736a1d0fcdbb84cd6
{
    require $file;
}
